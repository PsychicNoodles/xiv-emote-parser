// supported tags
tag_clickable = { "Clickable" }
tag_sheet = { "Sheet" }
tag_sheet_en = { "SheetEn" }

// supported functions
func_equal = { "Equal" }
func_obj_param = { "ObjectParameter" }
func_player_param = { "PlayerParameter" }

// supported objs
obj_objstr = { "ObjStr" }
obj_bnpcname = { "BNpcName" }

// low level types
text = { !("<") ~ (LETTER | PUNCTUATION | SEPARATOR)+ }
// tag_name = { ASCII_ALPHA_UPPER ~ ASCII_ALPHA+ }
tag_name = { tag_sheet_en | tag_sheet | tag_clickable }
// func_name = { ASCII_ALPHA_UPPER ~ ASCII_ALPHA+ }
func_name = { func_equal | func_obj_param | func_player_param }
param_num = { ASCII_DIGIT+ }
param_obj = { obj_objstr | obj_bnpcname }

// tags
open_tag = { "<" ~ tag_name ~ ("(" ~ param ~ ("," ~ param)* ~ ")")? ~ ">" }
auto_closing_tag = { "<" ~ tag_name ~ ("(" ~ param ~ ("," ~ param)* ~ ")")? ~ "/>" }
close_tag = { "</" ~ tag_name ~ ">" }

// elements
// pest_consume does not allow multiple variable length patterns in one rule
if_else_then_content = { function | element | text }
if_else_then = { if_else_then_content+ }
if_param = { function | auto_closing_tag }
if_else_element = { "<If(" ~ if_param ~ ")>" ~ if_else_then ~ "<Else/>" ~ if_else_then ~ "</If>" }
element = {
  if_else_element |
  // currently unused
  open_tag ~ text? ~ close_tag |
  auto_closing_tag
}

// high level types
function = { func_name ~ "(" ~ param ~ ("," ~ param)* ~ ")" }
param = { param_num | param_obj | function | element }
message_part = { element | text }
message = { SOI ~ message_part+ ~ EOI }
